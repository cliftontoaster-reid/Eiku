name: CodeQL Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run CodeQL analysis every Sunday at 3 AM UTC
    - cron: 0 3 * * 0

permissions: {}

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language:
          - cpp
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            libx11-dev \
            libxext-dev \
            pkg-config \
            curl \
            wget \
            xz-utils

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql-config.yml
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          queries: +security-extended,security-and-quality

      # Pre-build setup
      - name: Setup build environment
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "Setting up build environment for CodeQL analysis..."

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        env:
          CC: clang

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      # If the Autobuild fails above, remove it and uncomment the following three lines.
      # modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - name: Manual build
      #   run: |
      #     echo "Building Eiku library manually..."
      #     make clean || true
      #     make all
      #     echo "Building tests..."
      #     make criterion
      #     make test

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: true

      # Upload CodeQL results as artifacts for manual inspection
      - name: Upload CodeQL results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-results-${{ matrix.language }}
          path: ${{ runner.temp }}/codeql_databases
          retention-days: 14

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Fail the job if security vulnerabilities are found
          fail-on-severity: moderate
          # Allow licenses that are commonly used in C projects
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, GPL-2.0, GPL-3.0, LGPL-2.1, LGPL-3.0, ISC, Unlicense

  sarif-upload:
    name: SARIF Upload Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: analyze

    steps:
      - name: Check SARIF upload status
        run: |
          echo "‚úÖ CodeQL SARIF results have been uploaded to GitHub Security tab"
          echo "üîç View results at: https://github.com/${{ github.repository }}/security/code-scanning"
          echo "üìä Security alerts will appear in the Security tab if any issues are found"
