/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   raycast.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: autogenerated                                +#+  +:+       +#+ */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/03 00:00:00 by tool                #+#    #+# */
/*   Updated: 2025/10/03 00:00:00 by tool               ###   ########.fr */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include "math/vec.h"
#include "scene/scene.h"

/* Result of a single DDA raycast. Use `perp_dist` to compute projected
 * column heights (it is the perpendicular distance to avoid fisheye).
 * `hit_x` is the fractional hit position along the texture axis (0..1). If
 * the ray missed the map bounds, `hit` will be zero (function returns 0).
 */
/* Cardinal face of the wall hit (relative to map axes). Useful for
 * selecting a different texture or lighting per-face.
 */
enum e_eiku_raycast_face {
  EIKU_RAY_FACE_NORTH = 0,
  EIKU_RAY_FACE_SOUTH = 1,
  EIKU_RAY_FACE_EAST = 2,
  EIKU_RAY_FACE_WEST = 3,
};

typedef struct s_eiku_raycast_hit {
  int map_x; /* map cell x hit */
  int map_y; /* map cell y hit */
  int side;  /* 0 = hit vertical side (x-side), 1 = hit horizontal side (y-side)
              */
  enum e_eiku_raycast_face face; /* cardinal face that was hit */
  float perp_dist; /* perpendicular distance from origin to wall */
  float hit_x;     /* fractional hit coordinate along the wall (0.0 - 1.0) */
} t_eiku_raycast_hit;

/* Cast a single ray using DDA against the scene map.
 * - `scene`: scene containing `map_data` (non-zero = wall)
 * - `origin`: world-space origin (player position)
 * - `dir`: normalized ray direction (unit vector)
 * - `out`: hit result to fill on success
 * Returns 1 on hit, 0 on miss (ray left map bounds).
 * Notes: this function assumes map cells are unit squares at integer
 * coordinates.
 */
int eiku_raycast_cast(const t_eiku_2dscene *scene, t_vec2f origin, t_vec2f dir,
                      t_eiku_raycast_hit *out);
